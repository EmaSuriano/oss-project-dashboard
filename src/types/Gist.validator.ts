/* tslint:disable */
// generated by typescript-json-validator
import {inspect} from 'util';
import Ajv from 'ajv';
import Gist from './Gist';
export const ajv = new Ajv({"allErrors":true,"coerceTypes":false,"format":"fast","nullable":true,"unicode":true,"uniqueItems":true,"useDefaults":true});

ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));

export const GistSchema = {
  "$schema": "http://json-schema.org/draft-07/schema#",
  "defaultProperties": [
  ],
  "properties": {
    "files": {
      "items": {
        "defaultProperties": [
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "text": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "text"
        ],
        "type": "object"
      },
      "type": "array"
    },
    "name": {
      "type": "string"
    }
  },
  "required": [
    "files",
    "name"
  ],
  "type": "object"
};
export type ValidateFunction<T> = ((data: unknown) => data is T) & Pick<Ajv.ValidateFunction, 'errors'>
export const isGist = ajv.compile(GistSchema) as ValidateFunction<Gist>;
export default function validate(value: unknown): Gist {
  if (isGist(value)) {
    return value;
  } else {
    throw new Error(
      ajv.errorsText(isGist.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'Gist'}) +
      '\n\n' +
      inspect(value),
    );
  }
}
